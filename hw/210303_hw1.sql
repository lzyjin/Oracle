
-- SQL04_DDL 

-- 1
CREATE TABLE TB_CATEGORY(
    NAME VARCHAR2(10),
    USE_YN CHAR(1) DEFAULT 'Y' NOT NULL
);


--2
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) PRIMARY KEY,
    NAME VARCHAR2(10)
);

-- 3
ALTER TABLE TB_CATEGORY ADD CONSTRAINT PK_NAME PRIMARY KEY(NAME);


-- 4
ALTER TABLE TB_CLASS_TYPE MODIFY NAME CONSTRAINT NN_NAME NOT NULL;


-- 5
-- 두 테이블에서 컬럼명이 NO인것은 기존 타입을 유지하면서 크기는 10으로, 
-- 컬럼명이 NAME인것은 마찬가지로 기존타입을 유지하면서 크기 20으로 변경 
ALTER TABLE TB_CATEGORY MODIFY NAME VARCHAR2(20);
ALTER TABLE TB_CLASS_TYPE MODIFY NO VARCHAR2(10);
ALTER TABLE TB_CLASS_TYPE MODIFY NAME VARCHAR2(20);

-- 6
ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;


-- 7
ALTER TABLE TB_CATEGORY RENAME CONSTRAINT PK_NAME TO PK_CATEGORY_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME CONSTRAINT SYS_C007178 TO PK_CLASS_TYPE_NO;


-- 8
INSERT INTO TB_CATEGORY VALUES('공학', 'Y');
INSERT INTO TB_CATEGORY VALUES('자연과학', 'Y');
INSERT INTO TB_CATEGORY VALUES('의학', 'Y');
INSERT INTO TB_CATEGORY VALUES('예체능', 'Y');
INSERT INTO TB_CATEGORY VALUES('인문사회', 'Y');
COMMIT;

SELECT *
FROM TB_CATEGORY;



-- 9
-- TB_DEPARTMENT의 CATEGORY 컬럼이 TB_CATEGORY 테이블의 CATEGORY_NAME 컬럼을 
-- 부모값으로 참조하도록 FOREIGN KEY를 지정하시오 . KEY이름은 FK_테이블이름_컬럼이름 
-- FK_DEPARTMENT_CATEGORY

-- 부모테이블  TB_CATEGORY   CATEGORY_NAME 컬럼
-- 자식테이블 TB_DEPARTMENT  CATEGORY 컬럼
 

ALTER TABLE TB_DEPARTMENT 
    ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);
    
DESC TB_DEPARTMENT;



-- 10
-- 춘 기술대학교 학생들의 정보만이 포함되어있는 학생일반정보 VIEW를 만든다
-- 뷰 이름 : VW_학생일반정보, 컬럼 : 학번, 학생이름, 주소 
CREATE VIEW VW_학생일반정보 
    AS 
        SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
        FROM TB_STUDENT;

SELECT *
FROM VW_학생일반정보;

DROP VIEW VW_학생일반정보;

-- 11
-- 춘 기술대학교는 1년에 두 번씩 학과별로 학생과 지도교수가 지도 면담을 진행한다.
-- 이를 위해 사용할 학생이름, 학과 이름, 담당교수이름으로 구성되어 있는 VIEW를 만드시오.
-- 이때 지도 교수가 없는 학생이 있을 수 있음을 고려하시오
-- 단, 이 view는 단순 select만을 할 경우 학과별로 정렬되어 화면에 보여지게 만드세요.
CREATE VIEW VW_지도면담
    AS 
        SELECT S.STUDENT_NAME, D.DEPARTMENT_NAME, S.COACH_PROFESSOR_NO, P.PROFESSOR_NAME
        FROM TB_STUDENT S
            LEFT JOIN TB_DEPARTMENT D ON D.DEPARTMENT_NO = S.DEPARTMENT_NO
            LEFT JOIN TB_PROFESSOR P ON S.COACH_PROFESSOR_NO = P.PROFESSOR_NO
        ORDER BY 2;
    
-- 실패한 풀이   
SELECT S.STUDENT_NAME, D.DEPARTMENT_NAME, S.COACH_PROFESSOR_NO, P.PROFESSOR_NAME
FROM TB_STUDENT S
LEFT JOIN TB_DEPARTMENT D ON D.DEPARTMENT_NO = S.DEPARTMENT_NO
LEFT JOIN TB_PROFESSOR P ON D.DEPARTMENT_NO = P.DEPARTMENT_NO
ORDER BY 2;
    
SELECT *
FROM VW_지도면담;

DROP VIEW VW_지도면담;

SELECT *
FROM TB_DEPARTMENT;

SELECT *
FROM TB_PROFESSOR;


-- 12
-- 모든 학과의 학과별 학생수를 확인할 수 있도록 적절한 VIEW를 작성
CREATE VIEW VW_학과별학생수 
    AS 
        SELECT DEPARTMENT_NAME, COUNT(*) AS STUDENT_COUNT
        FROM TB_STUDENT
            JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
        GROUP BY DEPARTMENT_NAME;

SELECT *
FROM VW_학과별학생수;



-- 13
SELECT *
FROM VW_학생일반정보;

UPDATE VW_학생일반정보 SET STUDENT_NAME = '김예진' WHERE STUDENT_NO = 'A213046';

ROLLBACK;

-- 14

-- CREATE 할 때 WITH READ ONLY 를 추가 
CREATE VIEW VW_학생일반정보 
    AS 
        SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
        FROM TB_STUDENT
        WITH READ ONLY;

UPDATE VW_학생일반정보 SET STUDENT_NAME = '김예진' WHERE STUDENT_NO = 'A213046';
-- cannot perform a DML operation on a read-only view

DROP VIEW VW_학생일반정보;

-- 15
SELECT CLASS_NO, CLASS_NAME, COUNT(*)
FROM TB_CLASS
    JOIN TB_GRADE USING(CLASS_NO)
--WHERE TO_NUMBER(SUBSTR(TERM_NO, 1, 4)) BETWEEN 200
GROUP BY CLASS_NO, CLASS_NAME
ORDER BY 1;

SELECT *
FROM TB_CLASS;

SELECT *
FROM TB_STUDENT;

SELECT *
FROM TB_GRADE;

SELECT ROWNUM, *
FROM TB_CLASS
    JOIN TB_GRADE USING(CLASS_NO);




SHOW USER;

DESC EMPLOYEE;








